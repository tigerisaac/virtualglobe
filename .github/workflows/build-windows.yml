# .github/workflows/build-windows.yml
name: Build Windows Executable # Name of the workflow displayed on GitHub

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Run on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build:
    runs-on: windows-latest # Use the latest Windows runner provided by GitHub

    steps:
    # 1. Check out your repository code
    - name: Check out repository
      uses: actions/checkout@v4 # Use the standard checkout action

    # 2. Set up Python 3.11
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        # Optional: Cache pip dependencies for faster subsequent builds
        # cache: 'pip'

    # 3. Install dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      # Note: This assumes requirements.txt lists:
      # Flask, waitress, opencv-python, numpy, mediapipe, Pillow, pyinstaller

    # 4. Build the executable with PyInstaller (Revised Path Finding)
    - name: Build executable with PyInstaller
      run: |
        # Find the directory containing the mediapipe package itself
        $mediapipe_pkg_dir = python -c "import mediapipe, os; print(os.path.dirname(mediapipe.__file__))"
        Write-Host "Found MediaPipe package directory at: $mediapipe_pkg_dir"

        # Construct the path to the modules subdirectory
        $mediapipe_modules_path = Join-Path $mediapipe_pkg_dir "modules" # Append 'modules'
        Write-Host "Using MediaPipe modules path: $mediapipe_modules_path"

        # Check if the templates directory exists in the repository root
        if (-not (Test-Path -Path "templates" -PathType Container)) {
          Write-Error "Error: 'templates' directory not found in repository root. Make sure it exists and was committed."
          exit 1
        }
        # Check if the calculated mediapipe modules path exists after installation
         if (-not (Test-Path -Path $mediapipe_modules_path -PathType Container)) {
           Write-Error "Error: MediaPipe modules directory not found at calculated path: $mediapipe_modules_path. Check mediapipe installation in the previous step and path calculation."
           # Optional: List files in pkg dir for debugging
           Write-Host "Listing contents of $mediapipe_pkg_dir (if it exists):"
           if (Test-Path -Path $mediapipe_pkg_dir -PathType Container) { Get-ChildItem -Path $mediapipe_pkg_dir | Select-Object -ExpandProperty Name } else { Write-Host "$mediapipe_pkg_dir not found."}
           exit 1
         }

        # Run PyInstaller command
        Write-Host "Running PyInstaller..."
        pyinstaller --noconfirm --onefile --name HandEyeGlobeApp `
          --add-data "$($mediapipe_modules_path);mediapipe\modules" `
          --add-data "templates;templates" `
          main.py
      shell: pwsh # Use PowerShell for variable handling on Windows runners

    # 5. Upload the artifact (the built executable)
    #    This makes the .exe downloadable from the workflow run page.
    - name: Upload Windows Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: HandEyeGlobeApp-Windows # Name of the artifact zip file
        path: dist/HandEyeGlobeApp.exe # Path to the single executable created by --onefile
        # If you didn't use --onefile, change path to: dist/HandEyeGlobeApp/
        if-no-files-found: error # Fail the workflow if the executable wasn't created
